// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fedjo/ori-app/pb (interfaces: OriServiceClient,OriService_GcdClient)

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	context "context"
	pb "github.com/fedjo/ori-app/pb"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockOriServiceClient is a mock of OriServiceClient interface
type MockOriServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOriServiceClientMockRecorder
}

// MockOriServiceClientMockRecorder is the mock recorder for MockOriServiceClient
type MockOriServiceClientMockRecorder struct {
	mock *MockOriServiceClient
}

// NewMockOriServiceClient creates a new mock instance
func NewMockOriServiceClient(ctrl *gomock.Controller) *MockOriServiceClient {
	mock := &MockOriServiceClient{ctrl: ctrl}
	mock.recorder = &MockOriServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOriServiceClient) EXPECT() *MockOriServiceClientMockRecorder {
	return m.recorder
}

// Gcd mocks base method
func (m *MockOriServiceClient) Gcd(arg0 context.Context, arg1 ...grpc.CallOption) (pb.OriService_GcdClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Gcd", varargs...)
	ret0, _ := ret[0].(pb.OriService_GcdClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gcd indicates an expected call of Gcd
func (mr *MockOriServiceClientMockRecorder) Gcd(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gcd", reflect.TypeOf((*MockOriServiceClient)(nil).Gcd), varargs...)
}

// Sqrt mocks base method
func (m *MockOriServiceClient) Sqrt(arg0 context.Context, arg1 *pb.Value, arg2 ...grpc.CallOption) (pb.OriService_SqrtClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sqrt", varargs...)
	ret0, _ := ret[0].(pb.OriService_SqrtClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sqrt indicates an expected call of Sqrt
func (mr *MockOriServiceClientMockRecorder) Sqrt(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sqrt", reflect.TypeOf((*MockOriServiceClient)(nil).Sqrt), varargs...)
}

// Sum mocks base method
func (m *MockOriServiceClient) Sum(arg0 context.Context, arg1 *pb.Point, arg2 ...grpc.CallOption) (*pb.Ret, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sum", varargs...)
	ret0, _ := ret[0].(*pb.Ret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sum indicates an expected call of Sum
func (mr *MockOriServiceClientMockRecorder) Sum(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sum", reflect.TypeOf((*MockOriServiceClient)(nil).Sum), varargs...)
}

// MockOriService_GcdClient is a mock of OriService_GcdClient interface
type MockOriService_GcdClient struct {
	ctrl     *gomock.Controller
	recorder *MockOriService_GcdClientMockRecorder
}

// MockOriService_GcdClientMockRecorder is the mock recorder for MockOriService_GcdClient
type MockOriService_GcdClientMockRecorder struct {
	mock *MockOriService_GcdClient
}

// NewMockOriService_GcdClient creates a new mock instance
func NewMockOriService_GcdClient(ctrl *gomock.Controller) *MockOriService_GcdClient {
	mock := &MockOriService_GcdClient{ctrl: ctrl}
	mock.recorder = &MockOriService_GcdClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOriService_GcdClient) EXPECT() *MockOriService_GcdClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method
func (m *MockOriService_GcdClient) CloseAndRecv() (*pb.RetSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*pb.RetSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv
func (mr *MockOriService_GcdClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockOriService_GcdClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method
func (m *MockOriService_GcdClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockOriService_GcdClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockOriService_GcdClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockOriService_GcdClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockOriService_GcdClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockOriService_GcdClient)(nil).Context))
}

// Header mocks base method
func (m *MockOriService_GcdClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockOriService_GcdClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockOriService_GcdClient)(nil).Header))
}

// RecvMsg mocks base method
func (m *MockOriService_GcdClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockOriService_GcdClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockOriService_GcdClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockOriService_GcdClient) Send(arg0 *pb.Point) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockOriService_GcdClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockOriService_GcdClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockOriService_GcdClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockOriService_GcdClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockOriService_GcdClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockOriService_GcdClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockOriService_GcdClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockOriService_GcdClient)(nil).Trailer))
}
