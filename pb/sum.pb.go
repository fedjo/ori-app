// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sum.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Value struct {
	V                    int64    `protobuf:"varint,1,opt,name=v,proto3" json:"v,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Value) Reset()         { *m = Value{} }
func (m *Value) String() string { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()    {}
func (*Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_62743f9cdc99b9fd, []int{0}
}

func (m *Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Value.Unmarshal(m, b)
}
func (m *Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Value.Marshal(b, m, deterministic)
}
func (m *Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Value.Merge(m, src)
}
func (m *Value) XXX_Size() int {
	return xxx_messageInfo_Value.Size(m)
}
func (m *Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Value proto.InternalMessageInfo

func (m *Value) GetV() int64 {
	if m != nil {
		return m.V
	}
	return 0
}

type Point struct {
	X                    int64    `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    int64    `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_62743f9cdc99b9fd, []int{1}
}

func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Point) GetY() int64 {
	if m != nil {
		return m.Y
	}
	return 0
}

type Ret struct {
	Ret                  int64    `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ret) Reset()         { *m = Ret{} }
func (m *Ret) String() string { return proto.CompactTextString(m) }
func (*Ret) ProtoMessage()    {}
func (*Ret) Descriptor() ([]byte, []int) {
	return fileDescriptor_62743f9cdc99b9fd, []int{2}
}

func (m *Ret) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ret.Unmarshal(m, b)
}
func (m *Ret) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ret.Marshal(b, m, deterministic)
}
func (m *Ret) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ret.Merge(m, src)
}
func (m *Ret) XXX_Size() int {
	return xxx_messageInfo_Ret.Size(m)
}
func (m *Ret) XXX_DiscardUnknown() {
	xxx_messageInfo_Ret.DiscardUnknown(m)
}

var xxx_messageInfo_Ret proto.InternalMessageInfo

func (m *Ret) GetRet() int64 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *Ret) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*Value)(nil), "pb.Value")
	proto.RegisterType((*Point)(nil), "pb.Point")
	proto.RegisterType((*Ret)(nil), "pb.Ret")
}

func init() { proto.RegisterFile("sum.proto", fileDescriptor_62743f9cdc99b9fd) }

var fileDescriptor_62743f9cdc99b9fd = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2e, 0xcd, 0xd5,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x12, 0xe5, 0x62, 0x0d, 0x4b, 0xcc,
	0x29, 0x4d, 0x15, 0xe2, 0xe1, 0x62, 0x2c, 0x93, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e, 0x62, 0x2c,
	0x53, 0x52, 0xe6, 0x62, 0x0d, 0xc8, 0xcf, 0xcc, 0x2b, 0x01, 0x09, 0x57, 0xc0, 0x84, 0x2b, 0x40,
	0xbc, 0x4a, 0x09, 0x26, 0x08, 0xaf, 0x52, 0x49, 0x93, 0x8b, 0x39, 0x28, 0xb5, 0x44, 0x48, 0x80,
	0x8b, 0xb9, 0x28, 0xb5, 0x04, 0xaa, 0x08, 0xc4, 0x04, 0x89, 0xe4, 0x16, 0xa7, 0x83, 0x15, 0x72,
	0x06, 0x81, 0x98, 0x46, 0x19, 0x5c, 0x5c, 0xfe, 0x45, 0x99, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9,
	0xa9, 0x42, 0xd2, 0x5c, 0xcc, 0xc1, 0xa5, 0xb9, 0x42, 0x9c, 0x7a, 0x05, 0x49, 0x7a, 0x60, 0x6b,
	0xa4, 0xd8, 0x41, 0xcc, 0xa0, 0xd4, 0x12, 0x25, 0x06, 0x21, 0x59, 0x2e, 0x66, 0xf7, 0xe4, 0x14,
	0xec, 0x92, 0x1a, 0x8c, 0x42, 0x72, 0x5c, 0x2c, 0xc1, 0x85, 0x45, 0x25, 0x10, 0x79, 0xb0, 0xd3,
	0x91, 0xe4, 0x0d, 0x18, 0x93, 0xd8, 0xc0, 0x7e, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xe3,
	0x22, 0x7c, 0xeb, 0xe8, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OriServiceClient is the client API for OriService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OriServiceClient interface {
	Sum(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Ret, error)
	Gcd(ctx context.Context, opts ...grpc.CallOption) (OriService_GcdClient, error)
	Sqrt(ctx context.Context, in *Value, opts ...grpc.CallOption) (OriService_SqrtClient, error)
}

type oriServiceClient struct {
	cc *grpc.ClientConn
}

func NewOriServiceClient(cc *grpc.ClientConn) OriServiceClient {
	return &oriServiceClient{cc}
}

func (c *oriServiceClient) Sum(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Ret, error) {
	out := new(Ret)
	err := c.cc.Invoke(ctx, "/pb.OriService/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oriServiceClient) Gcd(ctx context.Context, opts ...grpc.CallOption) (OriService_GcdClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OriService_serviceDesc.Streams[0], "/pb.OriService/Gcd", opts...)
	if err != nil {
		return nil, err
	}
	x := &oriServiceGcdClient{stream}
	return x, nil
}

type OriService_GcdClient interface {
	Send(*Point) error
	CloseAndRecv() (*Ret, error)
	grpc.ClientStream
}

type oriServiceGcdClient struct {
	grpc.ClientStream
}

func (x *oriServiceGcdClient) Send(m *Point) error {
	return x.ClientStream.SendMsg(m)
}

func (x *oriServiceGcdClient) CloseAndRecv() (*Ret, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ret)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oriServiceClient) Sqrt(ctx context.Context, in *Value, opts ...grpc.CallOption) (OriService_SqrtClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OriService_serviceDesc.Streams[1], "/pb.OriService/Sqrt", opts...)
	if err != nil {
		return nil, err
	}
	x := &oriServiceSqrtClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OriService_SqrtClient interface {
	Recv() (*Ret, error)
	grpc.ClientStream
}

type oriServiceSqrtClient struct {
	grpc.ClientStream
}

func (x *oriServiceSqrtClient) Recv() (*Ret, error) {
	m := new(Ret)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OriServiceServer is the server API for OriService service.
type OriServiceServer interface {
	Sum(context.Context, *Point) (*Ret, error)
	Gcd(OriService_GcdServer) error
	Sqrt(*Value, OriService_SqrtServer) error
}

// UnimplementedOriServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOriServiceServer struct {
}

func (*UnimplementedOriServiceServer) Sum(ctx context.Context, req *Point) (*Ret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (*UnimplementedOriServiceServer) Gcd(srv OriService_GcdServer) error {
	return status.Errorf(codes.Unimplemented, "method Gcd not implemented")
}
func (*UnimplementedOriServiceServer) Sqrt(req *Value, srv OriService_SqrtServer) error {
	return status.Errorf(codes.Unimplemented, "method Sqrt not implemented")
}

func RegisterOriServiceServer(s *grpc.Server, srv OriServiceServer) {
	s.RegisterService(&_OriService_serviceDesc, srv)
}

func _OriService_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OriServiceServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OriService/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OriServiceServer).Sum(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

func _OriService_Gcd_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OriServiceServer).Gcd(&oriServiceGcdServer{stream})
}

type OriService_GcdServer interface {
	SendAndClose(*Ret) error
	Recv() (*Point, error)
	grpc.ServerStream
}

type oriServiceGcdServer struct {
	grpc.ServerStream
}

func (x *oriServiceGcdServer) SendAndClose(m *Ret) error {
	return x.ServerStream.SendMsg(m)
}

func (x *oriServiceGcdServer) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OriService_Sqrt_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Value)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OriServiceServer).Sqrt(m, &oriServiceSqrtServer{stream})
}

type OriService_SqrtServer interface {
	Send(*Ret) error
	grpc.ServerStream
}

type oriServiceSqrtServer struct {
	grpc.ServerStream
}

func (x *oriServiceSqrtServer) Send(m *Ret) error {
	return x.ServerStream.SendMsg(m)
}

var _OriService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OriService",
	HandlerType: (*OriServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _OriService_Sum_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Gcd",
			Handler:       _OriService_Gcd_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Sqrt",
			Handler:       _OriService_Sqrt_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sum.proto",
}
